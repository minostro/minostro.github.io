---
layout: post
title: "Meaculpa's: A Distributed Point of Sales System Built in Django"
date: 2017-05-29 12:49:00
tag:
- Django
- Python
- JavaScript
projects: true
---
## Overview
Meaculpa's is a Distributed Point of Sales System built for the biggest liquor store chain located in the North of Chile. The design of Meaculpa's system is divided into two major components: *branch* and *central*. *branch* is the transactional system that processes product sales, product returns, and manages the inventory of the products locally. Currently, there are 5 branches (real liquor stores) in operation. *central* is the admin system that manages the products, providers, orders, and product inventory company wise. *central* is also responsible for holding all the transactional data generated by the branches, so the owners and managers can generate reports and make strategical decisions with them.

## Key Features
* The communication between *branch* and *central* is Asynchronous. *branch* polls for data updates.
* *branch* is designed in such a way that it can operates without having connectivity with *central*.
* *branch* can be accessed remotely to update inventory quantities.
* *central* automatically creates orders for branches that are running out of inventory.

## Logical Diagram
![Logical Diagram](/assets/images/projects/meaculpas/logical_diagram.png)


## Physical Diagram
![Logical Diagram](/assets/images/projects/alymoly/physical_diagram.png)
Because of the size of the business, the application is running in just one machine. For convienence purposes, the application can accept requests from other computers whithin the network. This was done so the Owner/Manager of the store could interact withthe Inventory Management module without interrupting the sales process.

## Software Stack
* Python 2.7
* Django 1.10
* PostgreSQL 9.5
* JQuery
* JQueryUI

## Learnings/Challenges
* After that the first version of the UI was up and running, I soon realized that the shop assistants were struggling with usign the mouse to interact with the UI. Using the mouse was error prone (sometimes the click the wrong button) and also slow them down. I decided to change the UI so the could only use the keyboard to interact with the application if they wanted to. The use of mouse was not banned, but it was optional with the UI redesign.
* The Owner/Manager of the store did not have previous training using computers. The training part was more challenged as the Owner needed to learn how to use computers and the application.
* Early releases of the application helped to keep engage the users of the application. Morever, it helped me to quickly iterate and the necessary changes to the application so it could met the requirements of the users.

## Role
I implemented the UI as well as part of the modules/classes in the Backend Service. I worked in this project with [Andrés Otárola](https://github.com/aotarola). We both worked as contractors.
